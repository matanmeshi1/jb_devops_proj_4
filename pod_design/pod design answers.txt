1. Get pods with label information

kubectl get pods --show-labels=true

2. . Create 5 nginx pods in which two of them is labeled env=prod and
three of them is labeled env=dev

kubectl create deployment prod-nginx --image=nginx:alpine  --replicas=2 
kubectl label pod --selector="app=prod-nginx" env=prod
kubectl create deployment dev-nginx --image=nginx:alpine  --replicas=3 
kubectl label pod --selector="app=dev-nginx" env=dev 

3. Verify all the pods are created with correct labels

kubectl get pods --show-labels=true

4. Get the pods with label env=dev

kubectl get pods -l env=dev

5. Get the pods with label env=dev and also output the labels

kubectl get pods -l env=dev --show-labels=true --show-labels=true

6. Get the pods with label env=prod

kubectl get pods -l env=prod

7. Get the pods with label env=prod and also output the labels

kubectl get pods -l env=prod --show-labels=true

8. Get the pods with label env

kubectl get pods -l env

9.Get the pods with labels env=dev and env=prod

kubectl get pods -l  "env in (dev,prod)"

10. Get the pods with labels env=dev and env=prod and output the
labels as well

kubectl get pods -l  "env in (dev,prod)" --show-labels=true

11. Change the label for one of the pod to env=uat and list all the pods to
verify

#pod to change: dev-nginx-54678c769d-vs45g
kubectl label pod dev-nginx-54678c769d-vs45g env=uat --overwrite=true
kubectl get pods -l env=uat


12. .Remove the labels for the pods that we created now and verify all the
labels are removed

kubectl label pods -l "env in (dev,prod,uat)" env-
kubectl get pods -l env

13. Letâ€™s add the label app=nginx for all the pods and verify (using
kubectl)

kubectl label pods  -l app!=nginx app=nginx --overwrite=true

14. Get all the nodes with labels

# k3d cluster create mycluster --agents 2 --servers 2
kubectl get nodes --show-labels=true

15. Label the worker node nodeName=nginxnode

kubectl label node k3d-mycluster-agent-0 nodeName=nginxnode

16. Create a Pod that will be deployed on the worker node with the label
nodeName=nginxnode


apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  nodeSelector:
    nodeName: nginxnode
  containers:
    - image: nginx
      name: nginx
      resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}

kubectl apply -f pod_design/16.yaml

17. Verify the pod that it is scheduled with the node selector on the right
node
kubectl get pods nginx -o wide

18. 